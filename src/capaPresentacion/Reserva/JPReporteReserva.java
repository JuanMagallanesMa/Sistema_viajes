/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package capaPresentacion.Reserva;
import capaNegocio.Controlador;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import entidades.Reserva;
/**
 *
 * @author Juan magallanes
 */
public class JPReporteReserva extends javax.swing.JPanel {
    private JComboBox<String> cmbOrigen, cmbDestino;
    private JComboBox<String> cmbClase, cmbEstado;
    private JSpinner spDesde, spHasta;
    private JButton btnBuscar;
    private JTable tabla;
    private DefaultTableModel modelo;   
    /**
     * Creates new form JPReporteReserva
     */
    public JPReporteReserva() {
        setLayout(new BorderLayout());

        // Filtros
        cmbOrigen = new JComboBox<>(new String[]{"", "Perú", "México", "Ecuador"});
        cmbDestino = new JComboBox<>(new String[]{"", "Perú", "México", "Ecuador"});
        cmbClase = new JComboBox<>(new String[]{"", "Económica", "Ejecutiva", "VIP"});
        cmbEstado = new JComboBox<>(new String[]{"", "Pendiente", "Confirmado", "Cancelado"});

        spDesde = new JSpinner(new SpinnerDateModel());
        spDesde.setEditor(new JSpinner.DateEditor(spDesde, "yyyy-MM-dd"));
        spHasta = new JSpinner(new SpinnerDateModel());
        spHasta.setEditor(new JSpinner.DateEditor(spHasta, "yyyy-MM-dd"));

        btnBuscar = new JButton("Buscar");

        JPanel filtros = new JPanel(new GridLayout(3, 4, 5, 5));
        filtros.setBorder(BorderFactory.createTitledBorder("Filtros"));
        filtros.add(new JLabel("Origen:"));
        filtros.add(cmbOrigen);
        filtros.add(new JLabel("Destino:"));
        filtros.add(cmbDestino);
        filtros.add(new JLabel("Clase:"));
        filtros.add(cmbClase);
        filtros.add(new JLabel("Estado:"));
        filtros.add(cmbEstado);
        filtros.add(new JLabel("Desde (Fecha viaje):"));
        filtros.add(spDesde);
        filtros.add(new JLabel("Hasta (Fecha viaje):"));
        filtros.add(spHasta);

        add(filtros, BorderLayout.NORTH);

        modelo = new DefaultTableModel(new String[]{
            "ID", "Cliente", "Origen", "Destino", "Clase", "Estado", "Pasajeros", "Precio", "F. Reserva", "F. Viaje"
        }, 0);
        tabla = new JTable(modelo);
        add(new JScrollPane(tabla), BorderLayout.CENTER);
        add(btnBuscar, BorderLayout.SOUTH);

        btnBuscar.addActionListener(e -> {
            String origen = (String) cmbOrigen.getSelectedItem();
            String destino = (String) cmbDestino.getSelectedItem();
            String clase = (String) cmbClase.getSelectedItem();
            String estado = (String) cmbEstado.getSelectedItem();
            Timestamp desde = new Timestamp(((Date) spDesde.getValue()).getTime());
            Timestamp hasta = new Timestamp(((Date) spHasta.getValue()).getTime());

            ArrayList<Reserva> lista = Controlador.buscarReservas(origen, destino, clase, estado, desde, hasta);
            actualizarTabla(lista);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void actualizarTabla(ArrayList<Reserva> lista) {
        modelo.setRowCount(0);
        for (Reserva r : lista) {
            modelo.addRow(new Object[]{
                r.id, r.nombres_apellidos, r.origen, r.destino, r.clase, r.estado,
                r.cantidad_pasajeros, r.precio_total, r.fecha_reserva, r.fecha_viaje
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
